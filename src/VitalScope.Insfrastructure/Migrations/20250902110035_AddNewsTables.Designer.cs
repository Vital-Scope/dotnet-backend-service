// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VitalScope.Insfrastructure;

#nullable disable

namespace VitalScope.Insfrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250902110035_AddNewsTables")]
    partial class AddNewsTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.PatientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients", "vital");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.StudyMainInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudyMetaInformationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("StudyMetaInformationId");

                    b.ToTable("StudyMain", "vital");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.StudyMetaInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<float?>("Apgar1")
                        .HasColumnType("real");

                    b.Property<float?>("Apgar5")
                        .HasColumnType("real");

                    b.Property<float?>("BDecf")
                        .HasColumnType("real");

                    b.Property<float?>("BE")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Delivtype")
                        .HasColumnType("integer");

                    b.Property<int?>("Diabetes")
                        .HasColumnType("integer");

                    b.Property<int?>("Gravidity")
                        .HasColumnType("integer");

                    b.Property<int?>("IIstage")
                        .HasColumnType("integer");

                    b.Property<int?>("Istage")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NumSignals")
                        .HasColumnType("integer");

                    b.Property<float?>("PCO2")
                        .HasColumnType("real");

                    b.Property<int?>("Parity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<float?>("Ph")
                        .HasColumnType("real");

                    b.Property<int?>("Presentation")
                        .HasColumnType("integer");

                    b.Property<int?>("SamplingFrequency")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("StudyMetas", "vital");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "vital");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.UserSettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("ContractionMax")
                        .HasColumnType("double precision");

                    b.Property<double>("ContractionMin")
                        .HasColumnType("double precision");

                    b.Property<double>("HeartRateMax")
                        .HasColumnType("double precision");

                    b.Property<double>("HeartRateMin")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings", "vital");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.StudyMainInformationEntity", b =>
                {
                    b.HasOne("VitalScope.Insfrastructure.Models.StudyMetaInformationEntity", "StudyMetaInformation")
                        .WithMany("InfoMetas")
                        .HasForeignKey("StudyMetaInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyMetaInformation");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.StudyMetaInformationEntity", b =>
                {
                    b.HasOne("VitalScope.Insfrastructure.Models.PatientEntity", "Patient")
                        .WithMany("StudyMetaInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.UserSettingEntity", b =>
                {
                    b.HasOne("VitalScope.Insfrastructure.Models.UserEntity", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("VitalScope.Insfrastructure.Models.UserSettingEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.PatientEntity", b =>
                {
                    b.Navigation("StudyMetaInformations");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.StudyMetaInformationEntity", b =>
                {
                    b.Navigation("InfoMetas");
                });

            modelBuilder.Entity("VitalScope.Insfrastructure.Models.UserEntity", b =>
                {
                    b.Navigation("UserSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
